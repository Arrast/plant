using System.Collections;
using System.Collections.Generic;
using System.IO;
using Unity.EditorCoroutines.Editor;
using UnityEngine;
using UnityEngine.Networking;

namespace versoft.data_model
{
    public class InvalidDownloadException : System.Exception
    {
        public InvalidDownloadException()
        {
        }

        public InvalidDownloadException(string message) : base(message)
        {
        }

        public InvalidDownloadException(string message, System.Exception inner) : base(message, inner)
        {
        }
    }

    public static class DownloadSheetsData
    {
        private static string ClassPath
        {
            get
            {
                return Path.Combine("Assets", "Scripts", "DataModel", "AutoGenerated");
            }
        }

        private static string defaultSheetId = "0";
        private static string newUrlFormat = "https://docs.google.com/spreadsheets/d/{0}/export?format=tsv&gid={1}";

        public static IEnumerator DownloadData(string spreadsheetId)
        {
            string classTemplate = GetClassTemplate();
            string url = string.Format(newUrlFormat, spreadsheetId, defaultSheetId);

            UnityWebRequest downloadWebRequest = new UnityWebRequest(url);
            downloadWebRequest.downloadHandler = new DownloadHandlerBuffer();

            yield return downloadWebRequest.SendWebRequest();
            if(downloadWebRequest.error == null)
            {
                string[] split = SplitTextInLines(downloadWebRequest.downloadHandler.text);
                foreach (string tab in split)
                {
                    if (!string.IsNullOrEmpty(tab))
                    {
                        string[] tabSplit = Const.SplitLineFromCSV(tab);
                        yield return EditorCoroutineUtility.StartCoroutineOwnerless(ReadTab(tabSplit, spreadsheetId, classTemplate));
                    }
                }
            }
            else
            {
                throw new InvalidDownloadException(downloadWebRequest.error);
            }
        }

        public static IEnumerator ReadTab(string[] tabSplit, string spreadsheetId, string classTemplate)
        {
            if (string.IsNullOrEmpty(tabSplit[1])) { yield break; }
            string tabUrl = string.Format(newUrlFormat, spreadsheetId, tabSplit[1]);
            UnityWebRequest downloadWebRequest = new UnityWebRequest(tabUrl); 
            downloadWebRequest.downloadHandler = new DownloadHandlerBuffer();

            yield return downloadWebRequest.SendWebRequest();
            if (downloadWebRequest.error == null && !string.IsNullOrEmpty(downloadWebRequest.downloadHandler.text))
            {
                string className = tabSplit[0];
                string[] textLines = SplitTextInLines(downloadWebRequest.downloadHandler.text);
                if (textLines != null)
                {
                    WriteToClass(className, textLines, classTemplate);
                    WriteDataToFile(className, textLines);
                }
            }
            else
            {
                throw new InvalidDownloadException(downloadWebRequest.error);
            }
        }

        private static void WriteToClass(string tabName, string[] splitLines, string classTemplate)
        {
            string fileName = SafeGetFileName(Directory.GetCurrentDirectory(), ClassPath, tabName, Const.ClassFileExtension);
            string body = FormatBody(splitLines);

            using (StreamWriter writer = new StreamWriter(fileName, false))
            {
                writer.Write(string.Format(classTemplate, tabName, body));
            }
        }

        private static void WriteDataToFile(string tabName, string[] splitLines)
        {
            string fileName = SafeGetFileName(Application.streamingAssetsPath, Const.DataFileFolder, tabName, Const.DataFileExtension);
            UnityEngine.Debug.LogError(fileName);
            using (StreamWriter writer = new StreamWriter(fileName, false))
            {
                foreach (string line in splitLines)
                {
                    writer.WriteLine(line);
                }
            }
        }

        private static string FormatBody(string[] splitLines)
        {
            string formattedBody = "";
            string attributePattern = "\tpublic {1} {0};\n";

            List<string[]> attributeLines = new List<string[]>();
            attributeLines.Add(Const.SplitLineFromCSV(splitLines[0]));
            attributeLines.Add(Const.SplitLineFromCSV(splitLines[1]));

            for (int i = 0; i < attributeLines[0].Length; i++)
            {
                formattedBody += string.Format(attributePattern, attributeLines[0][i], attributeLines[1][i]);
            }

            return formattedBody;
        }

        private static string SafeGetFileName(string baseFolder, string subFolder, string tabName, string tabExtension)
        {
            string folder = Path.Combine(baseFolder, subFolder);
            if (!Directory.Exists(folder))
            {
                Directory.CreateDirectory(folder);
            }

            return Path.Combine(folder, tabName + tabExtension);
        }

        public static string GetClassTemplate()
        {
            var templateFile = Resources.Load<TextAsset>("Template");
            if (templateFile != null)
            {
                return templateFile.text;
            }
            return string.Empty;
        }

        private static string[] SplitTextInLines(string text)
        {
            if (string.IsNullOrEmpty(text)) { return null; }

            return text.Split(new[] { "\r\n", "\r", "\n" }, System.StringSplitOptions.None);
        }
    }

}